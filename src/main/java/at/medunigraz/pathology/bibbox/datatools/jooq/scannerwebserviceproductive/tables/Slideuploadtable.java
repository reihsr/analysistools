/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Scannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables.records.SlideuploadtableRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Slideuploadtable extends TableImpl<SlideuploadtableRecord> {

    private static final long serialVersionUID = -341566624;

    /**
     * The reference instance of <code>scannerwebserviceproductive.slideuploadtable</code>
     */
    public static final Slideuploadtable SLIDEUPLOADTABLE = new Slideuploadtable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SlideuploadtableRecord> getRecordType() {
        return SlideuploadtableRecord.class;
    }

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.uploadid</code>.
     */
    public final TableField<SlideuploadtableRecord, Integer> UPLOADID = createField("uploadid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('scannerwebserviceproductive.googleslideuploadid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.scanid_fk</code>.
     */
    public final TableField<SlideuploadtableRecord, String> SCANID_FK = createField("scanid_fk", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.uploadready</code>.
     */
    public final TableField<SlideuploadtableRecord, Integer> UPLOADREADY = createField("uploadready", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.uploadstartdate</code>.
     */
    public final TableField<SlideuploadtableRecord, Integer> UPLOADSTARTDATE = createField("uploadstartdate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.uploadenddate</code>.
     */
    public final TableField<SlideuploadtableRecord, Integer> UPLOADENDDATE = createField("uploadenddate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.uploadfolder</code>.
     */
    public final TableField<SlideuploadtableRecord, String> UPLOADFOLDER = createField("uploadfolder", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.slideuploadtable.projectid_fk</code>.
     */
    public final TableField<SlideuploadtableRecord, Integer> PROJECTID_FK = createField("projectid_fk", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>scannerwebserviceproductive.slideuploadtable</code> table reference
     */
    public Slideuploadtable() {
        this(DSL.name("slideuploadtable"), null);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.slideuploadtable</code> table reference
     */
    public Slideuploadtable(String alias) {
        this(DSL.name(alias), SLIDEUPLOADTABLE);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.slideuploadtable</code> table reference
     */
    public Slideuploadtable(Name alias) {
        this(alias, SLIDEUPLOADTABLE);
    }

    private Slideuploadtable(Name alias, Table<SlideuploadtableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Slideuploadtable(Name alias, Table<SlideuploadtableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Slideuploadtable(Table<O> child, ForeignKey<O, SlideuploadtableRecord> key) {
        super(child, key, SLIDEUPLOADTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Scannerwebserviceproductive.SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<SlideuploadtableRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SLIDEUPLOADTABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Slideuploadtable as(String alias) {
        return new Slideuploadtable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Slideuploadtable as(Name alias) {
        return new Slideuploadtable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Slideuploadtable rename(String name) {
        return new Slideuploadtable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Slideuploadtable rename(Name name) {
        return new Slideuploadtable(name, null);
    }
}
