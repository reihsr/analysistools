/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.PatientRepositorySaat;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.tables.records.FindingsTokenMapRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FindingsTokenMap extends TableImpl<FindingsTokenMapRecord> {

    private static final long serialVersionUID = 1992331137;

    /**
     * The reference instance of <code>patient_repository_saat.findings_token_map</code>
     */
    public static final FindingsTokenMap FINDINGS_TOKEN_MAP = new FindingsTokenMap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindingsTokenMapRecord> getRecordType() {
        return FindingsTokenMapRecord.class;
    }

    /**
     * The column <code>patient_repository_saat.findings_token_map.findings_token_map_id</code>.
     */
    public final TableField<FindingsTokenMapRecord, Integer> FINDINGS_TOKEN_MAP_ID = createField("findings_token_map_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('patient_repository_saat.findings_token_map_findings_token_map_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>patient_repository_saat.findings_token_map.findings_token_id</code>.
     */
    public final TableField<FindingsTokenMapRecord, Integer> FINDINGS_TOKEN_ID = createField("findings_token_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patient_repository_saat.findings_token_map.finding_id</code>.
     */
    public final TableField<FindingsTokenMapRecord, Integer> FINDING_ID = createField("finding_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patient_repository_saat.findings_token_map.count</code>.
     */
    public final TableField<FindingsTokenMapRecord, Integer> COUNT = createField("count", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * Create a <code>patient_repository_saat.findings_token_map</code> table reference
     */
    public FindingsTokenMap() {
        this(DSL.name("findings_token_map"), null);
    }

    /**
     * Create an aliased <code>patient_repository_saat.findings_token_map</code> table reference
     */
    public FindingsTokenMap(String alias) {
        this(DSL.name(alias), FINDINGS_TOKEN_MAP);
    }

    /**
     * Create an aliased <code>patient_repository_saat.findings_token_map</code> table reference
     */
    public FindingsTokenMap(Name alias) {
        this(alias, FINDINGS_TOKEN_MAP);
    }

    private FindingsTokenMap(Name alias, Table<FindingsTokenMapRecord> aliased) {
        this(alias, aliased, null);
    }

    private FindingsTokenMap(Name alias, Table<FindingsTokenMapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FindingsTokenMap(Table<O> child, ForeignKey<O, FindingsTokenMapRecord> key) {
        super(child, key, FINDINGS_TOKEN_MAP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PatientRepositorySaat.PATIENT_REPOSITORY_SAAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FINDINGS_TOKEN_MAP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FindingsTokenMapRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FINDINGS_TOKEN_MAP;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FindingsTokenMapRecord> getPrimaryKey() {
        return Keys.FINDINGS_TOKEN_MAP_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FindingsTokenMapRecord>> getKeys() {
        return Arrays.<UniqueKey<FindingsTokenMapRecord>>asList(Keys.FINDINGS_TOKEN_MAP_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMap as(String alias) {
        return new FindingsTokenMap(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMap as(Name alias) {
        return new FindingsTokenMap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingsTokenMap rename(String name) {
        return new FindingsTokenMap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingsTokenMap rename(Name name) {
        return new FindingsTokenMap(name, null);
    }
}
