/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Public;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables.records.FindingsRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Findings extends TableImpl<FindingsRecord> {

    private static final long serialVersionUID = -673070414;

    /**
     * The reference instance of <code>public.findings</code>
     */
    public static final Findings FINDINGS = new Findings();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindingsRecord> getRecordType() {
        return FindingsRecord.class;
    }

    /**
     * The column <code>public.findings.finding_id</code>.
     */
    public final TableField<FindingsRecord, Integer> FINDING_ID = createField("finding_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('findings_finding_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.findings.befund_id</code>.
     */
    public final TableField<FindingsRecord, Long> BEFUND_ID = createField("befund_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.findings.aura_index</code>.
     */
    public final TableField<FindingsRecord, String> AURA_INDEX = createField("aura_index", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.findings.patient_id</code>.
     */
    public final TableField<FindingsRecord, Long> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.findings.age</code>.
     */
    public final TableField<FindingsRecord, Integer> AGE = createField("age", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.findings.examination_type</code>.
     */
    public final TableField<FindingsRecord, String> EXAMINATION_TYPE = createField("examination_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.findings.examination_date</code>.
     */
    public final TableField<FindingsRecord, Date> EXAMINATION_DATE = createField("examination_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>public.findings.examination_number</code>.
     */
    public final TableField<FindingsRecord, Integer> EXAMINATION_NUMBER = createField("examination_number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.findings.diagnosis</code>.
     */
    public final TableField<FindingsRecord, String> DIAGNOSIS = createField("diagnosis", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.findings.diagnosis_clean</code>.
     */
    public final TableField<FindingsRecord, String> DIAGNOSIS_CLEAN = createField("diagnosis_clean", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.findings.organ</code>.
     */
    public final TableField<FindingsRecord, String> ORGAN = createField("organ", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.findings.organ_zuordnung</code>.
     */
    public final TableField<FindingsRecord, String> ORGAN_ZUORDNUNG = createField("organ_zuordnung", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.findings.source</code>.
     */
    public final TableField<FindingsRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.findings.t</code>.
     */
    public final TableField<FindingsRecord, String> T = createField("t", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.findings.n</code>.
     */
    public final TableField<FindingsRecord, String> N = createField("n", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.findings.m</code>.
     */
    public final TableField<FindingsRecord, String> M = createField("m", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.findings.g</code>.
     */
    public final TableField<FindingsRecord, String> G = createField("g", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.findings.r</code>.
     */
    public final TableField<FindingsRecord, String> R = createField("r", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.findings.l</code>.
     */
    public final TableField<FindingsRecord, String> L = createField("l", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.findings.v</code>.
     */
    public final TableField<FindingsRecord, String> V = createField("v", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * Create a <code>public.findings</code> table reference
     */
    public Findings() {
        this(DSL.name("findings"), null);
    }

    /**
     * Create an aliased <code>public.findings</code> table reference
     */
    public Findings(String alias) {
        this(DSL.name(alias), FINDINGS);
    }

    /**
     * Create an aliased <code>public.findings</code> table reference
     */
    public Findings(Name alias) {
        this(alias, FINDINGS);
    }

    private Findings(Name alias, Table<FindingsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Findings(Name alias, Table<FindingsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Findings(Table<O> child, ForeignKey<O, FindingsRecord> key) {
        super(child, key, FINDINGS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FINDINGS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FindingsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FINDINGS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FindingsRecord> getPrimaryKey() {
        return Keys.FINDINGS_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FindingsRecord>> getKeys() {
        return Arrays.<UniqueKey<FindingsRecord>>asList(Keys.FINDINGS_ID);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Findings as(String alias) {
        return new Findings(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Findings as(Name alias) {
        return new Findings(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Findings rename(String name) {
        return new Findings(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Findings rename(Name name) {
        return new Findings(name, null);
    }
}
