/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.ProstateSaat;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.tables.records.ExtractedGleasonRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ExtractedGleason extends TableImpl<ExtractedGleasonRecord> {

    private static final long serialVersionUID = -1961572961;

    /**
     * The reference instance of <code>prostate_saat.extracted_gleason</code>
     */
    public static final ExtractedGleason EXTRACTED_GLEASON = new ExtractedGleason();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ExtractedGleasonRecord> getRecordType() {
        return ExtractedGleasonRecord.class;
    }

    /**
     * The column <code>prostate_saat.extracted_gleason.extracted_gleason_id</code>.
     */
    public final TableField<ExtractedGleasonRecord, Integer> EXTRACTED_GLEASON_ID = createField("extracted_gleason_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('prostate_saat.extracted_gleason_extracted_gleason_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>prostate_saat.extracted_gleason.xml_report_befunddaten_id</code>.
     */
    public final TableField<ExtractedGleasonRecord, Integer> XML_REPORT_BEFUNDDATEN_ID = createField("xml_report_befunddaten_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>prostate_saat.extracted_gleason.gleason_score</code>.
     */
    public final TableField<ExtractedGleasonRecord, String> GLEASON_SCORE = createField("gleason_score", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_saat.extracted_gleason.number_of_gleason_scoures</code>.
     */
    public final TableField<ExtractedGleasonRecord, Integer> NUMBER_OF_GLEASON_SCOURES = createField("number_of_gleason_scoures", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>prostate_saat.extracted_gleason.slide_id</code>.
     */
    public final TableField<ExtractedGleasonRecord, String> SLIDE_ID = createField("slide_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_saat.extracted_gleason.selected</code>.
     */
    public final TableField<ExtractedGleasonRecord, Boolean> SELECTED = createField("selected", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>prostate_saat.extracted_gleason.highlight</code>.
     */
    public final TableField<ExtractedGleasonRecord, String> HIGHLIGHT = createField("highlight", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>prostate_saat.extracted_gleason</code> table reference
     */
    public ExtractedGleason() {
        this(DSL.name("extracted_gleason"), null);
    }

    /**
     * Create an aliased <code>prostate_saat.extracted_gleason</code> table reference
     */
    public ExtractedGleason(String alias) {
        this(DSL.name(alias), EXTRACTED_GLEASON);
    }

    /**
     * Create an aliased <code>prostate_saat.extracted_gleason</code> table reference
     */
    public ExtractedGleason(Name alias) {
        this(alias, EXTRACTED_GLEASON);
    }

    private ExtractedGleason(Name alias, Table<ExtractedGleasonRecord> aliased) {
        this(alias, aliased, null);
    }

    private ExtractedGleason(Name alias, Table<ExtractedGleasonRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ExtractedGleason(Table<O> child, ForeignKey<O, ExtractedGleasonRecord> key) {
        super(child, key, EXTRACTED_GLEASON);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProstateSaat.PROSTATE_SAAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EXTRACTED_GLEASON_ID_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ExtractedGleasonRecord, Integer> getIdentity() {
        return Keys.IDENTITY_EXTRACTED_GLEASON;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ExtractedGleasonRecord> getPrimaryKey() {
        return Keys.EXTRACTED_GLEASON_ID_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ExtractedGleasonRecord>> getKeys() {
        return Arrays.<UniqueKey<ExtractedGleasonRecord>>asList(Keys.EXTRACTED_GLEASON_ID_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExtractedGleason as(String alias) {
        return new ExtractedGleason(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ExtractedGleason as(Name alias) {
        return new ExtractedGleason(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtractedGleason rename(String name) {
        return new ExtractedGleason(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ExtractedGleason rename(Name name) {
        return new ExtractedGleason(name, null);
    }
}
