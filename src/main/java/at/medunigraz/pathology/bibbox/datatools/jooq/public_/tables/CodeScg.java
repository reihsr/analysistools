/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Public;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables.records.CodeScgRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeScg extends TableImpl<CodeScgRecord> {

    private static final long serialVersionUID = 624644820;

    /**
     * The reference instance of <code>public.code_scg</code>
     */
    public static final CodeScg CODE_SCG = new CodeScg();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeScgRecord> getRecordType() {
        return CodeScgRecord.class;
    }

    /**
     * The column <code>public.code_scg.id</code>.
     */
    public final TableField<CodeScgRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('code_scg_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.code_scg.code</code>.
     */
    public final TableField<CodeScgRecord, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.code_scg.description</code>.
     */
    public final TableField<CodeScgRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.code_scg</code> table reference
     */
    public CodeScg() {
        this(DSL.name("code_scg"), null);
    }

    /**
     * Create an aliased <code>public.code_scg</code> table reference
     */
    public CodeScg(String alias) {
        this(DSL.name(alias), CODE_SCG);
    }

    /**
     * Create an aliased <code>public.code_scg</code> table reference
     */
    public CodeScg(Name alias) {
        this(alias, CODE_SCG);
    }

    private CodeScg(Name alias, Table<CodeScgRecord> aliased) {
        this(alias, aliased, null);
    }

    private CodeScg(Name alias, Table<CodeScgRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CodeScg(Table<O> child, ForeignKey<O, CodeScgRecord> key) {
        super(child, key, CODE_SCG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CODE_SCG_CODE_HASH, Indexes.CODE_SCG_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CodeScgRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CODE_SCG;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CodeScgRecord> getPrimaryKey() {
        return Keys.CODE_SCG_ID_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeScgRecord>> getKeys() {
        return Arrays.<UniqueKey<CodeScgRecord>>asList(Keys.CODE_SCG_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeScg as(String alias) {
        return new CodeScg(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeScg as(Name alias) {
        return new CodeScg(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeScg rename(String name) {
        return new CodeScg(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeScg rename(Name name) {
        return new CodeScg(name, null);
    }
}
