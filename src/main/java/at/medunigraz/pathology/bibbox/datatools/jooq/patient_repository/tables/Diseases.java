/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.PatientRepository;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.tables.records.DiseasesRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Diseases extends TableImpl<DiseasesRecord> {

    private static final long serialVersionUID = 1424779030;

    /**
     * The reference instance of <code>patient_repository.diseases</code>
     */
    public static final Diseases DISEASES = new Diseases();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiseasesRecord> getRecordType() {
        return DiseasesRecord.class;
    }

    /**
     * The column <code>patient_repository.diseases.disease_id</code>.
     */
    public final TableField<DiseasesRecord, Integer> DISEASE_ID = createField("disease_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('patient_repository.diseases_disease_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>patient_repository.diseases.patient_id</code>.
     */
    public final TableField<DiseasesRecord, Long> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>patient_repository.diseases.finding_id_diagnosen</code>.
     */
    public final TableField<DiseasesRecord, String> FINDING_ID_DIAGNOSEN = createField("finding_id_diagnosen", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>patient_repository.diseases.time_diff</code>.
     */
    public final TableField<DiseasesRecord, Long> TIME_DIFF = createField("time_diff", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>patient_repository.diseases.age</code>.
     */
    public final TableField<DiseasesRecord, Double> AGE = createField("age", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>patient_repository.diseases.diagnosis</code>.
     */
    public final TableField<DiseasesRecord, String> DIAGNOSIS = createField("diagnosis", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patient_repository.diseases.diagnosis_clean</code>.
     */
    public final TableField<DiseasesRecord, String> DIAGNOSIS_CLEAN = createField("diagnosis_clean", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patient_repository.diseases.organ</code>.
     */
    public final TableField<DiseasesRecord, String> ORGAN = createField("organ", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patient_repository.diseases.organ_zuordnung</code>.
     */
    public final TableField<DiseasesRecord, String> ORGAN_ZUORDNUNG = createField("organ_zuordnung", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patient_repository.diseases.doctor</code>.
     */
    public final TableField<DiseasesRecord, String> DOCTOR = createField("doctor", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>patient_repository.diseases.doctor_id</code>.
     */
    public final TableField<DiseasesRecord, Integer> DOCTOR_ID = createField("doctor_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patient_repository.diseases.sender</code>.
     */
    public final TableField<DiseasesRecord, String> SENDER = createField("sender", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>patient_repository.diseases.sender_id</code>.
     */
    public final TableField<DiseasesRecord, Integer> SENDER_ID = createField("sender_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patient_repository.diseases.nb</code>.
     */
    public final TableField<DiseasesRecord, Short> NB = createField("nb", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>patient_repository.diseases.es_anz</code>.
     */
    public final TableField<DiseasesRecord, Short> ES_ANZ = createField("es_anz", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>patient_repository.diseases.dict_id_mor</code>.
     */
    public final TableField<DiseasesRecord, String> DICT_ID_MOR = createField("dict_id_mor", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patient_repository.diseases.dict_id_top</code>.
     */
    public final TableField<DiseasesRecord, String> DICT_ID_TOP = createField("dict_id_top", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>patient_repository.diseases.t</code>.
     */
    public final TableField<DiseasesRecord, String> T = createField("t", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>patient_repository.diseases.g</code>.
     */
    public final TableField<DiseasesRecord, String> G = createField("g", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>patient_repository.diseases.m</code>.
     */
    public final TableField<DiseasesRecord, String> M = createField("m", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>patient_repository.diseases.r</code>.
     */
    public final TableField<DiseasesRecord, String> R = createField("r", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>patient_repository.diseases.n</code>.
     */
    public final TableField<DiseasesRecord, String> N = createField("n", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>patient_repository.diseases.l</code>.
     */
    public final TableField<DiseasesRecord, String> L = createField("l", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>patient_repository.diseases.v</code>.
     */
    public final TableField<DiseasesRecord, String> V = createField("v", org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * The column <code>patient_repository.diseases.SCG</code>.
     */
    public final TableField<DiseasesRecord, String> SCG = createField("SCG", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>patient_repository.diseases.organ_test</code>.
     */
    public final TableField<DiseasesRecord, String> ORGAN_TEST = createField("organ_test", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>patient_repository.diseases.average_examination_date</code>.
     */
    public final TableField<DiseasesRecord, Date> AVERAGE_EXAMINATION_DATE = createField("average_examination_date", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>patient_repository.diseases.examination_type</code>.
     */
    public final TableField<DiseasesRecord, String> EXAMINATION_TYPE = createField("examination_type", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>patient_repository.diseases</code> table reference
     */
    public Diseases() {
        this(DSL.name("diseases"), null);
    }

    /**
     * Create an aliased <code>patient_repository.diseases</code> table reference
     */
    public Diseases(String alias) {
        this(DSL.name(alias), DISEASES);
    }

    /**
     * Create an aliased <code>patient_repository.diseases</code> table reference
     */
    public Diseases(Name alias) {
        this(alias, DISEASES);
    }

    private Diseases(Name alias, Table<DiseasesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Diseases(Name alias, Table<DiseasesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Diseases(Table<O> child, ForeignKey<O, DiseasesRecord> key) {
        super(child, key, DISEASES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PatientRepository.PATIENT_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DISEASE_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DiseasesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DISEASES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DiseasesRecord> getPrimaryKey() {
        return Keys.DISEASE_ID_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DiseasesRecord>> getKeys() {
        return Arrays.<UniqueKey<DiseasesRecord>>asList(Keys.DISEASE_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Diseases as(String alias) {
        return new Diseases(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Diseases as(Name alias) {
        return new Diseases(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Diseases rename(String name) {
        return new Diseases(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Diseases rename(Name name) {
        return new Diseases(name, null);
    }
}
