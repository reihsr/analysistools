/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.XxxoldScannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables.records.TypetableRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Typetable extends TableImpl<TypetableRecord> {

    private static final long serialVersionUID = -1940065014;

    /**
     * The reference instance of <code>xxxold_scannerwebserviceproductive.typetable</code>
     */
    public static final Typetable TYPETABLE = new Typetable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TypetableRecord> getRecordType() {
        return TypetableRecord.class;
    }

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typeid</code>.
     */
    public final TableField<TypetableRecord, Integer> TYPEID = createField("typeid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typerex</code>.
     */
    public final TableField<TypetableRecord, String> TYPEREX = createField("typerex", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typeshortvalue</code>.
     */
    public final TableField<TypetableRecord, String> TYPESHORTVALUE = createField("typeshortvalue", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typedescription</code>.
     */
    public final TableField<TypetableRecord, String> TYPEDESCRIPTION = createField("typedescription", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typelisted</code>.
     */
    public final TableField<TypetableRecord, Boolean> TYPELISTED = createField("typelisted", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typelocalsisation</code>.
     */
    public final TableField<TypetableRecord, String> TYPELOCALSISATION = createField("typelocalsisation", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.typetable.typematerialembeded</code>.
     */
    public final TableField<TypetableRecord, String> TYPEMATERIALEMBEDED = createField("typematerialembeded", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>xxxold_scannerwebserviceproductive.typetable</code> table reference
     */
    public Typetable() {
        this(DSL.name("typetable"), null);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.typetable</code> table reference
     */
    public Typetable(String alias) {
        this(DSL.name(alias), TYPETABLE);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.typetable</code> table reference
     */
    public Typetable(Name alias) {
        this(alias, TYPETABLE);
    }

    private Typetable(Name alias, Table<TypetableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Typetable(Name alias, Table<TypetableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Typetable(Table<O> child, ForeignKey<O, TypetableRecord> key) {
        super(child, key, TYPETABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return XxxoldScannerwebserviceproductive.XXXOLD_SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Typetable as(String alias) {
        return new Typetable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Typetable as(Name alias) {
        return new Typetable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Typetable rename(String name) {
        return new Typetable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Typetable rename(Name name) {
        return new Typetable(name, null);
    }
}
