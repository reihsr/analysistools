/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.PatientRepositorySaat;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.tables.records.FindingsTokenRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FindingsToken extends TableImpl<FindingsTokenRecord> {

    private static final long serialVersionUID = 790382766;

    /**
     * The reference instance of <code>patient_repository_saat.findings_token</code>
     */
    public static final FindingsToken FINDINGS_TOKEN = new FindingsToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindingsTokenRecord> getRecordType() {
        return FindingsTokenRecord.class;
    }

    /**
     * The column <code>patient_repository_saat.findings_token.findings_token_id</code>.
     */
    public final TableField<FindingsTokenRecord, Integer> FINDINGS_TOKEN_ID = createField("findings_token_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('patient_repository_saat.findings_token_findings_token_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>patient_repository_saat.findings_token.token</code>.
     */
    public final TableField<FindingsTokenRecord, String> TOKEN = createField("token", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>patient_repository_saat.findings_token</code> table reference
     */
    public FindingsToken() {
        this(DSL.name("findings_token"), null);
    }

    /**
     * Create an aliased <code>patient_repository_saat.findings_token</code> table reference
     */
    public FindingsToken(String alias) {
        this(DSL.name(alias), FINDINGS_TOKEN);
    }

    /**
     * Create an aliased <code>patient_repository_saat.findings_token</code> table reference
     */
    public FindingsToken(Name alias) {
        this(alias, FINDINGS_TOKEN);
    }

    private FindingsToken(Name alias, Table<FindingsTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private FindingsToken(Name alias, Table<FindingsTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FindingsToken(Table<O> child, ForeignKey<O, FindingsTokenRecord> key) {
        super(child, key, FINDINGS_TOKEN);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PatientRepositorySaat.PATIENT_REPOSITORY_SAAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FINDINGS_TOKEN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<FindingsTokenRecord, Integer> getIdentity() {
        return Keys.IDENTITY_FINDINGS_TOKEN;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FindingsTokenRecord> getPrimaryKey() {
        return Keys.FINDINGS_TOKEN_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FindingsTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<FindingsTokenRecord>>asList(Keys.FINDINGS_TOKEN_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsToken as(String alias) {
        return new FindingsToken(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsToken as(Name alias) {
        return new FindingsToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingsToken rename(String name) {
        return new FindingsToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingsToken rename(Name name) {
        return new FindingsToken(name, null);
    }
}
