/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Duplicatetable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Inboxtable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Projecttable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Qualitytable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Rackstatustable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Racktable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Scannerrackpositiontable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Scannertable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Scantable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Slidetable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Stagingreferenz;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Storagetable;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.Users;

import javax.annotation.Generated;

import org.jooq.Index;
import org.jooq.OrderField;
import org.jooq.impl.Internal;


/**
 * A class modelling indexes of tables of the <code>xxx20200705_scannerwebserviceproductive</code> 
 * schema.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Indexes {

    // -------------------------------------------------------------------------
    // INDEX definitions
    // -------------------------------------------------------------------------

    public static final Index DUPLICATETABLE_PKEY = Indexes0.DUPLICATETABLE_PKEY;
    public static final Index INBOXTABLE_PKEY = Indexes0.INBOXTABLE_PKEY;
    public static final Index PROJECTTABLE_PKEY = Indexes0.PROJECTTABLE_PKEY;
    public static final Index QUALITYTABLE_PKEY = Indexes0.QUALITYTABLE_PKEY;
    public static final Index RACKSTATUSTABLE_PKEY = Indexes0.RACKSTATUSTABLE_PKEY;
    public static final Index RACKTABLE_PKEY = Indexes0.RACKTABLE_PKEY;
    public static final Index SCANNERRACKPOSITIONTABLE_PKEY = Indexes0.SCANNERRACKPOSITIONTABLE_PKEY;
    public static final Index SCANNERTABLE_PKEY = Indexes0.SCANNERTABLE_PKEY;
    public static final Index SCANTABLE_PKEY = Indexes0.SCANTABLE_PKEY;
    public static final Index SLIDETABLE_PKEY = Indexes0.SLIDETABLE_PKEY;
    public static final Index STAGINGREFERENZ_PKEY = Indexes0.STAGINGREFERENZ_PKEY;
    public static final Index STORAGETABLE_PKEY = Indexes0.STORAGETABLE_PKEY;
    public static final Index USERS_PKEY = Indexes0.USERS_PKEY;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Indexes0 {
        public static Index DUPLICATETABLE_PKEY = Internal.createIndex("duplicatetable_pkey", Duplicatetable.DUPLICATETABLE, new OrderField[] { Duplicatetable.DUPLICATETABLE.DUPLICATEID }, true);
        public static Index INBOXTABLE_PKEY = Internal.createIndex("inboxtable_pkey", Inboxtable.INBOXTABLE, new OrderField[] { Inboxtable.INBOXTABLE.INBOXID }, true);
        public static Index PROJECTTABLE_PKEY = Internal.createIndex("projecttable_pkey", Projecttable.PROJECTTABLE, new OrderField[] { Projecttable.PROJECTTABLE.PROJECTID }, true);
        public static Index QUALITYTABLE_PKEY = Internal.createIndex("qualitytable_pkey", Qualitytable.QUALITYTABLE, new OrderField[] { Qualitytable.QUALITYTABLE.QUALITYID }, true);
        public static Index RACKSTATUSTABLE_PKEY = Internal.createIndex("rackstatustable_pkey", Rackstatustable.RACKSTATUSTABLE, new OrderField[] { Rackstatustable.RACKSTATUSTABLE.RACKSTATUSID }, true);
        public static Index RACKTABLE_PKEY = Internal.createIndex("racktable_pkey", Racktable.RACKTABLE, new OrderField[] { Racktable.RACKTABLE.RACKID }, true);
        public static Index SCANNERRACKPOSITIONTABLE_PKEY = Internal.createIndex("scannerrackpositiontable_pkey", Scannerrackpositiontable.SCANNERRACKPOSITIONTABLE, new OrderField[] { Scannerrackpositiontable.SCANNERRACKPOSITIONTABLE.SCANNERRACKPOSITIONID }, true);
        public static Index SCANNERTABLE_PKEY = Internal.createIndex("scannertable_pkey", Scannertable.SCANNERTABLE, new OrderField[] { Scannertable.SCANNERTABLE.SCANNERID }, true);
        public static Index SCANTABLE_PKEY = Internal.createIndex("scantable_pkey", Scantable.SCANTABLE, new OrderField[] { Scantable.SCANTABLE.SCANID }, true);
        public static Index SLIDETABLE_PKEY = Internal.createIndex("slidetable_pkey", Slidetable.SLIDETABLE, new OrderField[] { Slidetable.SLIDETABLE.SLIDEID }, true);
        public static Index STAGINGREFERENZ_PKEY = Internal.createIndex("stagingreferenz_pkey", Stagingreferenz.STAGINGREFERENZ, new OrderField[] { Stagingreferenz.STAGINGREFERENZ.STAGEINGREFERENZID }, true);
        public static Index STORAGETABLE_PKEY = Internal.createIndex("storagetable_pkey", Storagetable.STORAGETABLE, new OrderField[] { Storagetable.STORAGETABLE.STORAGEID }, true);
        public static Index USERS_PKEY = Internal.createIndex("users_pkey", Users.USERS, new OrderField[] { Users.USERS.USERID }, true);
    }
}
