/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.XxxoldScannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables.records.GooglejsonuploadtableRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Googlejsonuploadtable extends TableImpl<GooglejsonuploadtableRecord> {

    private static final long serialVersionUID = 395529967;

    /**
     * The reference instance of <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable</code>
     */
    public static final Googlejsonuploadtable GOOGLEJSONUPLOADTABLE = new Googlejsonuploadtable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GooglejsonuploadtableRecord> getRecordType() {
        return GooglejsonuploadtableRecord.class;
    }

    /**
     * The column <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable.uploadid</code>.
     */
    public final TableField<GooglejsonuploadtableRecord, Integer> UPLOADID = createField("uploadid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable.scanid_fk</code>.
     */
    public final TableField<GooglejsonuploadtableRecord, String> SCANID_FK = createField("scanid_fk", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable.uploaddate</code>.
     */
    public final TableField<GooglejsonuploadtableRecord, String> UPLOADDATE = createField("uploaddate", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable.uploadcontent</code>.
     */
    public final TableField<GooglejsonuploadtableRecord, String> UPLOADCONTENT = createField("uploadcontent", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable</code> table reference
     */
    public Googlejsonuploadtable() {
        this(DSL.name("googlejsonuploadtable"), null);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable</code> table reference
     */
    public Googlejsonuploadtable(String alias) {
        this(DSL.name(alias), GOOGLEJSONUPLOADTABLE);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.googlejsonuploadtable</code> table reference
     */
    public Googlejsonuploadtable(Name alias) {
        this(alias, GOOGLEJSONUPLOADTABLE);
    }

    private Googlejsonuploadtable(Name alias, Table<GooglejsonuploadtableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Googlejsonuploadtable(Name alias, Table<GooglejsonuploadtableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Googlejsonuploadtable(Table<O> child, ForeignKey<O, GooglejsonuploadtableRecord> key) {
        super(child, key, GOOGLEJSONUPLOADTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return XxxoldScannerwebserviceproductive.XXXOLD_SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Googlejsonuploadtable as(String alias) {
        return new Googlejsonuploadtable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Googlejsonuploadtable as(Name alias) {
        return new Googlejsonuploadtable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Googlejsonuploadtable rename(String name) {
        return new Googlejsonuploadtable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Googlejsonuploadtable rename(Name name) {
        return new Googlejsonuploadtable(name, null);
    }
}
