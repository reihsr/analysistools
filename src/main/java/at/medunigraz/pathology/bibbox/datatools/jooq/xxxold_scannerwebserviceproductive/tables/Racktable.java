/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.XxxoldScannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables.records.RacktableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Racktable extends TableImpl<RacktableRecord> {

    private static final long serialVersionUID = -1765962562;

    /**
     * The reference instance of <code>xxxold_scannerwebserviceproductive.racktable</code>
     */
    public static final Racktable RACKTABLE = new Racktable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RacktableRecord> getRecordType() {
        return RacktableRecord.class;
    }

    /**
     * The column <code>xxxold_scannerwebserviceproductive.racktable.rackid</code>.
     */
    public final TableField<RacktableRecord, String> RACKID = createField("rackid", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.racktable.rackstatusid_fk</code>.
     */
    public final TableField<RacktableRecord, String> RACKSTATUSID_FK = createField("rackstatusid_fk", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.racktable.racktype</code>.
     */
    public final TableField<RacktableRecord, String> RACKTYPE = createField("racktype", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.racktable.rackcapacity</code>.
     */
    public final TableField<RacktableRecord, String> RACKCAPACITY = createField("rackcapacity", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.racktable.projectid_fk</code>.
     */
    public final TableField<RacktableRecord, String> PROJECTID_FK = createField("projectid_fk", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.racktable.rackfillstatus</code>.
     */
    public final TableField<RacktableRecord, String> RACKFILLSTATUS = createField("rackfillstatus", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>xxxold_scannerwebserviceproductive.racktable</code> table reference
     */
    public Racktable() {
        this(DSL.name("racktable"), null);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.racktable</code> table reference
     */
    public Racktable(String alias) {
        this(DSL.name(alias), RACKTABLE);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.racktable</code> table reference
     */
    public Racktable(Name alias) {
        this(alias, RACKTABLE);
    }

    private Racktable(Name alias, Table<RacktableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Racktable(Name alias, Table<RacktableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Racktable(Table<O> child, ForeignKey<O, RacktableRecord> key) {
        super(child, key, RACKTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return XxxoldScannerwebserviceproductive.XXXOLD_SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RACKTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RacktableRecord> getPrimaryKey() {
        return Keys.RACKTABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RacktableRecord>> getKeys() {
        return Arrays.<UniqueKey<RacktableRecord>>asList(Keys.RACKTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Racktable as(String alias) {
        return new Racktable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Racktable as(Name alias) {
        return new Racktable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Racktable rename(String name) {
        return new Racktable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Racktable rename(Name name) {
        return new Racktable(name, null);
    }
}
