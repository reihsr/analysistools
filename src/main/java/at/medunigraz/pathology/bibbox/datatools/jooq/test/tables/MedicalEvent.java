/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.test.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.test.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.Test;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.tables.records.MedicalEventRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MedicalEvent extends TableImpl<MedicalEventRecord> {

    private static final long serialVersionUID = 1035666003;

    /**
     * The reference instance of <code>test.medical_event</code>
     */
    public static final MedicalEvent MEDICAL_EVENT = new MedicalEvent();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MedicalEventRecord> getRecordType() {
        return MedicalEventRecord.class;
    }

    /**
     * The column <code>test.medical_event.medical_event_id</code>.
     */
    public final TableField<MedicalEventRecord, Integer> MEDICAL_EVENT_ID = createField("medical_event_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test.medical_event_medical_event_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.medical_event.donor_id</code>.
     */
    public final TableField<MedicalEventRecord, Integer> DONOR_ID = createField("donor_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.medical_event.date_of_event</code>.
     */
    public final TableField<MedicalEventRecord, Date> DATE_OF_EVENT = createField("date_of_event", org.jooq.impl.SQLDataType.DATE.nullable(false), this, "");

    /**
     * The column <code>test.medical_event.event_type_id</code>.
     */
    public final TableField<MedicalEventRecord, Integer> EVENT_TYPE_ID = createField("event_type_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.medical_event.provider_id</code>.
     */
    public final TableField<MedicalEventRecord, Integer> PROVIDER_ID = createField("provider_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>test.medical_event.diagnosis</code>.
     */
    public final TableField<MedicalEventRecord, String> DIAGNOSIS = createField("diagnosis", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>test.medical_event</code> table reference
     */
    public MedicalEvent() {
        this(DSL.name("medical_event"), null);
    }

    /**
     * Create an aliased <code>test.medical_event</code> table reference
     */
    public MedicalEvent(String alias) {
        this(DSL.name(alias), MEDICAL_EVENT);
    }

    /**
     * Create an aliased <code>test.medical_event</code> table reference
     */
    public MedicalEvent(Name alias) {
        this(alias, MEDICAL_EVENT);
    }

    private MedicalEvent(Name alias, Table<MedicalEventRecord> aliased) {
        this(alias, aliased, null);
    }

    private MedicalEvent(Name alias, Table<MedicalEventRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MedicalEvent(Table<O> child, ForeignKey<O, MedicalEventRecord> key) {
        super(child, key, MEDICAL_EVENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MEDICAL_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MedicalEventRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MEDICAL_EVENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MedicalEventRecord> getPrimaryKey() {
        return Keys.MEDICAL_EVENT_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MedicalEventRecord>> getKeys() {
        return Arrays.<UniqueKey<MedicalEventRecord>>asList(Keys.MEDICAL_EVENT_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MedicalEvent as(String alias) {
        return new MedicalEvent(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MedicalEvent as(Name alias) {
        return new MedicalEvent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalEvent rename(String name) {
        return new MedicalEvent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MedicalEvent rename(Name name) {
        return new MedicalEvent(name, null);
    }
}
