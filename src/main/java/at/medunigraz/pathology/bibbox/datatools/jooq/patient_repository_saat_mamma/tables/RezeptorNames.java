/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.PatientRepositorySaatMamma;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.tables.records.RezeptorNamesRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RezeptorNames extends TableImpl<RezeptorNamesRecord> {

    private static final long serialVersionUID = -1755613605;

    /**
     * The reference instance of <code>patient_repository_saat_mamma.rezeptor_names</code>
     */
    public static final RezeptorNames REZEPTOR_NAMES = new RezeptorNames();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RezeptorNamesRecord> getRecordType() {
        return RezeptorNamesRecord.class;
    }

    /**
     * The column <code>patient_repository_saat_mamma.rezeptor_names.rezeptor_names_id</code>.
     */
    public final TableField<RezeptorNamesRecord, Integer> REZEPTOR_NAMES_ID = createField("rezeptor_names_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('patient_repository_saat_mamma.rezeptor_names_rezeptor_names_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>patient_repository_saat_mamma.rezeptor_names.findings_token_id</code>.
     */
    public final TableField<RezeptorNamesRecord, Integer> FINDINGS_TOKEN_ID = createField("findings_token_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patient_repository_saat_mamma.rezeptor_names.rezeptor_name</code>.
     */
    public final TableField<RezeptorNamesRecord, String> REZEPTOR_NAME = createField("rezeptor_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>patient_repository_saat_mamma.rezeptor_names</code> table reference
     */
    public RezeptorNames() {
        this(DSL.name("rezeptor_names"), null);
    }

    /**
     * Create an aliased <code>patient_repository_saat_mamma.rezeptor_names</code> table reference
     */
    public RezeptorNames(String alias) {
        this(DSL.name(alias), REZEPTOR_NAMES);
    }

    /**
     * Create an aliased <code>patient_repository_saat_mamma.rezeptor_names</code> table reference
     */
    public RezeptorNames(Name alias) {
        this(alias, REZEPTOR_NAMES);
    }

    private RezeptorNames(Name alias, Table<RezeptorNamesRecord> aliased) {
        this(alias, aliased, null);
    }

    private RezeptorNames(Name alias, Table<RezeptorNamesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> RezeptorNames(Table<O> child, ForeignKey<O, RezeptorNamesRecord> key) {
        super(child, key, REZEPTOR_NAMES);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PatientRepositorySaatMamma.PATIENT_REPOSITORY_SAAT_MAMMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.REZEPTOR_NAMES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<RezeptorNamesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_REZEPTOR_NAMES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RezeptorNamesRecord> getPrimaryKey() {
        return Keys.REZEPTOR_NAMES_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RezeptorNamesRecord>> getKeys() {
        return Arrays.<UniqueKey<RezeptorNamesRecord>>asList(Keys.REZEPTOR_NAMES_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RezeptorNames as(String alias) {
        return new RezeptorNames(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public RezeptorNames as(Name alias) {
        return new RezeptorNames(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RezeptorNames rename(String name) {
        return new RezeptorNames(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RezeptorNames rename(Name name) {
        return new RezeptorNames(name, null);
    }
}
