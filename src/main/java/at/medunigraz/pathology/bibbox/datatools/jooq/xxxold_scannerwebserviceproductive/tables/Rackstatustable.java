/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.XxxoldScannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables.records.RackstatustableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rackstatustable extends TableImpl<RackstatustableRecord> {

    private static final long serialVersionUID = 1869255799;

    /**
     * The reference instance of <code>xxxold_scannerwebserviceproductive.rackstatustable</code>
     */
    public static final Rackstatustable RACKSTATUSTABLE = new Rackstatustable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RackstatustableRecord> getRecordType() {
        return RackstatustableRecord.class;
    }

    /**
     * The column <code>xxxold_scannerwebserviceproductive.rackstatustable.rackstatusid</code>.
     */
    public final TableField<RackstatustableRecord, Integer> RACKSTATUSID = createField("rackstatusid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.rackstatustable.rackstatusname</code>.
     */
    public final TableField<RackstatustableRecord, String> RACKSTATUSNAME = createField("rackstatusname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.rackstatustable.rackstatusorder</code>.
     */
    public final TableField<RackstatustableRecord, String> RACKSTATUSORDER = createField("rackstatusorder", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>xxxold_scannerwebserviceproductive.rackstatustable</code> table reference
     */
    public Rackstatustable() {
        this(DSL.name("rackstatustable"), null);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.rackstatustable</code> table reference
     */
    public Rackstatustable(String alias) {
        this(DSL.name(alias), RACKSTATUSTABLE);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.rackstatustable</code> table reference
     */
    public Rackstatustable(Name alias) {
        this(alias, RACKSTATUSTABLE);
    }

    private Rackstatustable(Name alias, Table<RackstatustableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rackstatustable(Name alias, Table<RackstatustableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Rackstatustable(Table<O> child, ForeignKey<O, RackstatustableRecord> key) {
        super(child, key, RACKSTATUSTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return XxxoldScannerwebserviceproductive.XXXOLD_SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.RACKSTATUSTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<RackstatustableRecord> getPrimaryKey() {
        return Keys.RACKSTATUSTABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<RackstatustableRecord>> getKeys() {
        return Arrays.<UniqueKey<RackstatustableRecord>>asList(Keys.RACKSTATUSTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rackstatustable as(String alias) {
        return new Rackstatustable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Rackstatustable as(Name alias) {
        return new Rackstatustable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rackstatustable rename(String name) {
        return new Rackstatustable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rackstatustable rename(Name name) {
        return new Rackstatustable(name, null);
    }
}
