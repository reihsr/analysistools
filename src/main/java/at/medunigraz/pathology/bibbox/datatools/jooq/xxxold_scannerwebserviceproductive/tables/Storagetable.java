/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.XxxoldScannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxxold_scannerwebserviceproductive.tables.records.StoragetableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Storagetable extends TableImpl<StoragetableRecord> {

    private static final long serialVersionUID = -1689467185;

    /**
     * The reference instance of <code>xxxold_scannerwebserviceproductive.storagetable</code>
     */
    public static final Storagetable STORAGETABLE = new Storagetable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StoragetableRecord> getRecordType() {
        return StoragetableRecord.class;
    }

    /**
     * The column <code>xxxold_scannerwebserviceproductive.storagetable.storageid</code>.
     */
    public final TableField<StoragetableRecord, Integer> STORAGEID = createField("storageid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.storagetable.storagepath</code>.
     */
    public final TableField<StoragetableRecord, String> STORAGEPATH = createField("storagepath", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.storagetable.storageshouldbeonline</code>.
     */
    public final TableField<StoragetableRecord, Boolean> STORAGESHOULDBEONLINE = createField("storageshouldbeonline", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.storagetable.storagefreespace</code>.
     */
    public final TableField<StoragetableRecord, String> STORAGEFREESPACE = createField("storagefreespace", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>xxxold_scannerwebserviceproductive.storagetable.storageinfo</code>.
     */
    public final TableField<StoragetableRecord, String> STORAGEINFO = createField("storageinfo", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>xxxold_scannerwebserviceproductive.storagetable</code> table reference
     */
    public Storagetable() {
        this(DSL.name("storagetable"), null);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.storagetable</code> table reference
     */
    public Storagetable(String alias) {
        this(DSL.name(alias), STORAGETABLE);
    }

    /**
     * Create an aliased <code>xxxold_scannerwebserviceproductive.storagetable</code> table reference
     */
    public Storagetable(Name alias) {
        this(alias, STORAGETABLE);
    }

    private Storagetable(Name alias, Table<StoragetableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Storagetable(Name alias, Table<StoragetableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Storagetable(Table<O> child, ForeignKey<O, StoragetableRecord> key) {
        super(child, key, STORAGETABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return XxxoldScannerwebserviceproductive.XXXOLD_SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.STORAGETABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<StoragetableRecord> getPrimaryKey() {
        return Keys.STORAGETABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<StoragetableRecord>> getKeys() {
        return Arrays.<UniqueKey<StoragetableRecord>>asList(Keys.STORAGETABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Storagetable as(String alias) {
        return new Storagetable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Storagetable as(Name alias) {
        return new Storagetable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Storagetable rename(String name) {
        return new Storagetable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Storagetable rename(Name name) {
        return new Storagetable(name, null);
    }
}
