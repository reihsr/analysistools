/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.tables.records;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat.tables.FindingsTokenMap;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FindingsTokenMapRecord extends UpdatableRecordImpl<FindingsTokenMapRecord> implements Record4<Integer, Integer, Integer, Integer> {

    private static final long serialVersionUID = -1589779166;

    /**
     * Setter for <code>patient_repository_saat.findings_token_map.findings_token_map_id</code>.
     */
    public void setFindingsTokenMapId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>patient_repository_saat.findings_token_map.findings_token_map_id</code>.
     */
    public Integer getFindingsTokenMapId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>patient_repository_saat.findings_token_map.findings_token_id</code>.
     */
    public void setFindingsTokenId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>patient_repository_saat.findings_token_map.findings_token_id</code>.
     */
    public Integer getFindingsTokenId() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>patient_repository_saat.findings_token_map.finding_id</code>.
     */
    public void setFindingId(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>patient_repository_saat.findings_token_map.finding_id</code>.
     */
    public Integer getFindingId() {
        return (Integer) get(2);
    }

    /**
     * Setter for <code>patient_repository_saat.findings_token_map.count</code>.
     */
    public void setCount(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>patient_repository_saat.findings_token_map.count</code>.
     */
    public Integer getCount() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row4<Integer, Integer, Integer, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field1() {
        return FindingsTokenMap.FINDINGS_TOKEN_MAP.FINDINGS_TOKEN_MAP_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field2() {
        return FindingsTokenMap.FINDINGS_TOKEN_MAP.FINDINGS_TOKEN_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field3() {
        return FindingsTokenMap.FINDINGS_TOKEN_MAP.FINDING_ID;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<Integer> field4() {
        return FindingsTokenMap.FINDINGS_TOKEN_MAP.COUNT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component1() {
        return getFindingsTokenMapId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component2() {
        return getFindingsTokenId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component3() {
        return getFindingId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer component4() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value1() {
        return getFindingsTokenMapId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value2() {
        return getFindingsTokenId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value3() {
        return getFindingId();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Integer value4() {
        return getCount();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMapRecord value1(Integer value) {
        setFindingsTokenMapId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMapRecord value2(Integer value) {
        setFindingsTokenId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMapRecord value3(Integer value) {
        setFindingId(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMapRecord value4(Integer value) {
        setCount(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsTokenMapRecord values(Integer value1, Integer value2, Integer value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FindingsTokenMapRecord
     */
    public FindingsTokenMapRecord() {
        super(FindingsTokenMap.FINDINGS_TOKEN_MAP);
    }

    /**
     * Create a detached, initialised FindingsTokenMapRecord
     */
    public FindingsTokenMapRecord(Integer findingsTokenMapId, Integer findingsTokenId, Integer findingId, Integer count) {
        super(FindingsTokenMap.FINDINGS_TOKEN_MAP);

        set(0, findingsTokenMapId);
        set(1, findingsTokenId);
        set(2, findingId);
        set(3, count);
    }
}
