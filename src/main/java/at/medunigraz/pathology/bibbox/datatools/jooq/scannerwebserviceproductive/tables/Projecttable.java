/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Scannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables.records.ProjecttableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projecttable extends TableImpl<ProjecttableRecord> {

    private static final long serialVersionUID = 1292756484;

    /**
     * The reference instance of <code>scannerwebserviceproductive.projecttable</code>
     */
    public static final Projecttable PROJECTTABLE = new Projecttable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjecttableRecord> getRecordType() {
        return ProjecttableRecord.class;
    }

    /**
     * The column <code>scannerwebserviceproductive.projecttable.projectid</code>.
     */
    public final TableField<ProjecttableRecord, Integer> PROJECTID = createField("projectid", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>scannerwebserviceproductive.projecttable.projectname</code>.
     */
    public final TableField<ProjecttableRecord, String> PROJECTNAME = createField("projectname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.projecttable.projectadditionalinfo</code>.
     */
    public final TableField<ProjecttableRecord, String> PROJECTADDITIONALINFO = createField("projectadditionalinfo", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.projecttable.projectinboxfolder</code>.
     */
    public final TableField<ProjecttableRecord, String> PROJECTINBOXFOLDER = createField("projectinboxfolder", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.projecttable.projectinboxisactive</code>.
     */
    public final TableField<ProjecttableRecord, String> PROJECTINBOXISACTIVE = createField("projectinboxisactive", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>scannerwebserviceproductive.projecttable</code> table reference
     */
    public Projecttable() {
        this(DSL.name("projecttable"), null);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.projecttable</code> table reference
     */
    public Projecttable(String alias) {
        this(DSL.name(alias), PROJECTTABLE);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.projecttable</code> table reference
     */
    public Projecttable(Name alias) {
        this(alias, PROJECTTABLE);
    }

    private Projecttable(Name alias, Table<ProjecttableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projecttable(Name alias, Table<ProjecttableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Projecttable(Table<O> child, ForeignKey<O, ProjecttableRecord> key) {
        super(child, key, PROJECTTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Scannerwebserviceproductive.SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROJECTTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProjecttableRecord> getPrimaryKey() {
        return Keys.PROJECTTABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProjecttableRecord>> getKeys() {
        return Arrays.<UniqueKey<ProjecttableRecord>>asList(Keys.PROJECTTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projecttable as(String alias) {
        return new Projecttable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projecttable as(Name alias) {
        return new Projecttable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projecttable rename(String name) {
        return new Projecttable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projecttable rename(Name name) {
        return new Projecttable(name, null);
    }
}
