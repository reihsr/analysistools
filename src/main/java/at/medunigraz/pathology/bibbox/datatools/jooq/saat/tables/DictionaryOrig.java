/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.saat.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.saat.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.saat.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.saat.Saat;
import at.medunigraz.pathology.bibbox.datatools.jooq.saat.tables.records.DictionaryOrigRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DictionaryOrig extends TableImpl<DictionaryOrigRecord> {

    private static final long serialVersionUID = -681676547;

    /**
     * The reference instance of <code>saat.dictionary_orig</code>
     */
    public static final DictionaryOrig DICTIONARY_ORIG = new DictionaryOrig();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DictionaryOrigRecord> getRecordType() {
        return DictionaryOrigRecord.class;
    }

    /**
     * The column <code>saat.dictionary_orig.dictionary_id</code>.
     */
    public final TableField<DictionaryOrigRecord, Integer> DICTIONARY_ID = createField("dictionary_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>saat.dictionary_orig.after_synonym</code>.
     */
    public final TableField<DictionaryOrigRecord, Integer> AFTER_SYNONYM = createField("after_synonym", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>saat.dictionary_orig.before_synonym</code>.
     */
    public final TableField<DictionaryOrigRecord, Integer> BEFORE_SYNONYM = createField("before_synonym", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>saat.dictionary_orig.code_typ</code>.
     */
    public final TableField<DictionaryOrigRecord, String> CODE_TYP = createField("code_typ", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>saat.dictionary_orig.code_value</code>.
     */
    public final TableField<DictionaryOrigRecord, String> CODE_VALUE = createField("code_value", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>saat.dictionary_orig.ending</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> ENDING = createField("ending", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.foreword</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> FOREWORD = createField("foreword", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.iscode</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> ISCODE = createField("iscode", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.negation</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> NEGATION = createField("negation", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.occur</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> OCCUR = createField("occur", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.pattern</code>.
     */
    public final TableField<DictionaryOrigRecord, String> PATTERN = createField("pattern", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>saat.dictionary_orig.priority</code>.
     */
    public final TableField<DictionaryOrigRecord, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>saat.dictionary_orig.priority_node</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> PRIORITY_NODE = createField("priority_node", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.root</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> ROOT = createField("root", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.sentence</code>.
     */
    public final TableField<DictionaryOrigRecord, Boolean> SENTENCE = createField("sentence", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>saat.dictionary_orig.synonym</code>.
     */
    public final TableField<DictionaryOrigRecord, String> SYNONYM = createField("synonym", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>saat.dictionary_orig</code> table reference
     */
    public DictionaryOrig() {
        this(DSL.name("dictionary_orig"), null);
    }

    /**
     * Create an aliased <code>saat.dictionary_orig</code> table reference
     */
    public DictionaryOrig(String alias) {
        this(DSL.name(alias), DICTIONARY_ORIG);
    }

    /**
     * Create an aliased <code>saat.dictionary_orig</code> table reference
     */
    public DictionaryOrig(Name alias) {
        this(alias, DICTIONARY_ORIG);
    }

    private DictionaryOrig(Name alias, Table<DictionaryOrigRecord> aliased) {
        this(alias, aliased, null);
    }

    private DictionaryOrig(Name alias, Table<DictionaryOrigRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DictionaryOrig(Table<O> child, ForeignKey<O, DictionaryOrigRecord> key) {
        super(child, key, DICTIONARY_ORIG);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Saat.SAAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICTIONARY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DictionaryOrigRecord> getPrimaryKey() {
        return Keys.DICTIONARY_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DictionaryOrigRecord>> getKeys() {
        return Arrays.<UniqueKey<DictionaryOrigRecord>>asList(Keys.DICTIONARY_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictionaryOrig as(String alias) {
        return new DictionaryOrig(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DictionaryOrig as(Name alias) {
        return new DictionaryOrig(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DictionaryOrig rename(String name) {
        return new DictionaryOrig(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DictionaryOrig rename(Name name) {
        return new DictionaryOrig(name, null);
    }
}
