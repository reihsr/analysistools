/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.Xxx20200705Scannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.xxx20200705_scannerwebserviceproductive.tables.records.ProjectkeyvaluemapRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Projectkeyvaluemap extends TableImpl<ProjectkeyvaluemapRecord> {

    private static final long serialVersionUID = 49533564;

    /**
     * The reference instance of <code>xxx20200705_scannerwebserviceproductive.projectkeyvaluemap</code>
     */
    public static final Projectkeyvaluemap PROJECTKEYVALUEMAP = new Projectkeyvaluemap();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProjectkeyvaluemapRecord> getRecordType() {
        return ProjectkeyvaluemapRecord.class;
    }

    /**
     * The column <code>xxx20200705_scannerwebserviceproductive.projectkeyvaluemap.projectid_fk</code>.
     */
    public final TableField<ProjectkeyvaluemapRecord, Long> PROJECTID_FK = createField("projectid_fk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>xxx20200705_scannerwebserviceproductive.projectkeyvaluemap.keyvalueid_fk</code>.
     */
    public final TableField<ProjectkeyvaluemapRecord, String> KEYVALUEID_FK = createField("keyvalueid_fk", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>xxx20200705_scannerwebserviceproductive.projectkeyvaluemap</code> table reference
     */
    public Projectkeyvaluemap() {
        this(DSL.name("projectkeyvaluemap"), null);
    }

    /**
     * Create an aliased <code>xxx20200705_scannerwebserviceproductive.projectkeyvaluemap</code> table reference
     */
    public Projectkeyvaluemap(String alias) {
        this(DSL.name(alias), PROJECTKEYVALUEMAP);
    }

    /**
     * Create an aliased <code>xxx20200705_scannerwebserviceproductive.projectkeyvaluemap</code> table reference
     */
    public Projectkeyvaluemap(Name alias) {
        this(alias, PROJECTKEYVALUEMAP);
    }

    private Projectkeyvaluemap(Name alias, Table<ProjectkeyvaluemapRecord> aliased) {
        this(alias, aliased, null);
    }

    private Projectkeyvaluemap(Name alias, Table<ProjectkeyvaluemapRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Projectkeyvaluemap(Table<O> child, ForeignKey<O, ProjectkeyvaluemapRecord> key) {
        super(child, key, PROJECTKEYVALUEMAP);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Xxx20200705Scannerwebserviceproductive.XXX20200705_SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projectkeyvaluemap as(String alias) {
        return new Projectkeyvaluemap(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Projectkeyvaluemap as(Name alias) {
        return new Projectkeyvaluemap(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectkeyvaluemap rename(String name) {
        return new Projectkeyvaluemap(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Projectkeyvaluemap rename(Name name) {
        return new Projectkeyvaluemap(name, null);
    }
}
