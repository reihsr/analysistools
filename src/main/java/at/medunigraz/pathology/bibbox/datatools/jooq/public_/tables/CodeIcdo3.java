/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Public;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables.records.CodeIcdo3Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CodeIcdo3 extends TableImpl<CodeIcdo3Record> {

    private static final long serialVersionUID = -886111103;

    /**
     * The reference instance of <code>public.code_icdo3</code>
     */
    public static final CodeIcdo3 CODE_ICDO3 = new CodeIcdo3();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CodeIcdo3Record> getRecordType() {
        return CodeIcdo3Record.class;
    }

    /**
     * The column <code>public.code_icdo3.id</code>.
     */
    public final TableField<CodeIcdo3Record, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('code_icdo3_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.code_icdo3.code</code>.
     */
    public final TableField<CodeIcdo3Record, String> CODE = createField("code", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.code_icdo3.term</code>.
     */
    public final TableField<CodeIcdo3Record, Integer> TERM = createField("term", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.code_icdo3.sui</code>.
     */
    public final TableField<CodeIcdo3Record, Integer> SUI = createField("sui", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.code_icdo3.typ</code>.
     */
    public final TableField<CodeIcdo3Record, String> TYP = createField("typ", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_icdo3.use</code>.
     */
    public final TableField<CodeIcdo3Record, String> USE = createField("use", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_icdo3.description</code>.
     */
    public final TableField<CodeIcdo3Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_icdo3.localisation</code>.
     */
    public final TableField<CodeIcdo3Record, String> LOCALISATION = createField("localisation", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_icdo3.link</code>.
     */
    public final TableField<CodeIcdo3Record, String> LINK = createField("link", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_icdo3.exklusiva</code>.
     */
    public final TableField<CodeIcdo3Record, String> EXKLUSIVA = createField("exklusiva", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.code_icdo3.hint</code>.
     */
    public final TableField<CodeIcdo3Record, String> HINT = createField("hint", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>public.code_icdo3</code> table reference
     */
    public CodeIcdo3() {
        this(DSL.name("code_icdo3"), null);
    }

    /**
     * Create an aliased <code>public.code_icdo3</code> table reference
     */
    public CodeIcdo3(String alias) {
        this(DSL.name(alias), CODE_ICDO3);
    }

    /**
     * Create an aliased <code>public.code_icdo3</code> table reference
     */
    public CodeIcdo3(Name alias) {
        this(alias, CODE_ICDO3);
    }

    private CodeIcdo3(Name alias, Table<CodeIcdo3Record> aliased) {
        this(alias, aliased, null);
    }

    private CodeIcdo3(Name alias, Table<CodeIcdo3Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CodeIcdo3(Table<O> child, ForeignKey<O, CodeIcdo3Record> key) {
        super(child, key, CODE_ICDO3);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CODE_ICDO3_ID_PK, Indexes.CODE_OCDO3_CODE_HASH);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CodeIcdo3Record, Integer> getIdentity() {
        return Keys.IDENTITY_CODE_ICDO3;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CodeIcdo3Record> getPrimaryKey() {
        return Keys.CODE_ICDO3_ID_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CodeIcdo3Record>> getKeys() {
        return Arrays.<UniqueKey<CodeIcdo3Record>>asList(Keys.CODE_ICDO3_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeIcdo3 as(String alias) {
        return new CodeIcdo3(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CodeIcdo3 as(Name alias) {
        return new CodeIcdo3(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeIcdo3 rename(String name) {
        return new CodeIcdo3(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CodeIcdo3 rename(Name name) {
        return new CodeIcdo3(name, null);
    }
}
