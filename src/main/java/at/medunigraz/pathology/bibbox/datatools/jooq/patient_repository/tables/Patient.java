/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.PatientRepository;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository.tables.records.PatientRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Patient extends TableImpl<PatientRecord> {

    private static final long serialVersionUID = -94271711;

    /**
     * The reference instance of <code>patient_repository.patient</code>
     */
    public static final Patient PATIENT = new Patient();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PatientRecord> getRecordType() {
        return PatientRecord.class;
    }

    /**
     * The column <code>patient_repository.patient.patient_id</code>.
     */
    public final TableField<PatientRecord, Integer> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('patient_repository.patient_patient_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>patient_repository.patient.geburtsdatum</code>.
     */
    public final TableField<PatientRecord, Date> GEBURTSDATUM = createField("geburtsdatum", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>patient_repository.patient.geschlecht</code>.
     */
    public final TableField<PatientRecord, String> GESCHLECHT = createField("geschlecht", org.jooq.impl.SQLDataType.CHAR(1), this, "");

    /**
     * The column <code>patient_repository.patient.sterbedatum</code>.
     */
    public final TableField<PatientRecord, Date> STERBEDATUM = createField("sterbedatum", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>patient_repository.patient.obduktion</code>.
     */
    public final TableField<PatientRecord, String> OBDUKTION = createField("obduktion", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>patient_repository.patient.icdncode</code>.
     */
    public final TableField<PatientRecord, String> ICDNCODE = createField("icdncode", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>patient_repository.patient.icdecode</code>.
     */
    public final TableField<PatientRecord, String> ICDECODE = createField("icdecode", org.jooq.impl.SQLDataType.VARCHAR(10), this, "");

    /**
     * The column <code>patient_repository.patient.sampledb_id</code>.
     */
    public final TableField<PatientRecord, Integer> SAMPLEDB_ID = createField("sampledb_id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>patient_repository.patient.source</code>.
     */
    public final TableField<PatientRecord, String> SOURCE = createField("source", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>patient_repository.patient</code> table reference
     */
    public Patient() {
        this(DSL.name("patient"), null);
    }

    /**
     * Create an aliased <code>patient_repository.patient</code> table reference
     */
    public Patient(String alias) {
        this(DSL.name(alias), PATIENT);
    }

    /**
     * Create an aliased <code>patient_repository.patient</code> table reference
     */
    public Patient(Name alias) {
        this(alias, PATIENT);
    }

    private Patient(Name alias, Table<PatientRecord> aliased) {
        this(alias, aliased, null);
    }

    private Patient(Name alias, Table<PatientRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Patient(Table<O> child, ForeignKey<O, PatientRecord> key) {
        super(child, key, PATIENT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PatientRepository.PATIENT_REPOSITORY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PATIENT_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PatientRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PATIENT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PatientRecord> getPrimaryKey() {
        return Keys.PATIENT_ID_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PatientRecord>> getKeys() {
        return Arrays.<UniqueKey<PatientRecord>>asList(Keys.PATIENT_ID_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patient as(String alias) {
        return new Patient(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Patient as(Name alias) {
        return new Patient(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(String name) {
        return new Patient(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Patient rename(Name name) {
        return new Patient(name, null);
    }
}
