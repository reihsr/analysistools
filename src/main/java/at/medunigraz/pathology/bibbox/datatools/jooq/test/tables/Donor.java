/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.test.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.test.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.Test;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.tables.records.DonorRecord;

import java.sql.Date;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Donor extends TableImpl<DonorRecord> {

    private static final long serialVersionUID = 1223060617;

    /**
     * The reference instance of <code>test.donor</code>
     */
    public static final Donor DONOR = new Donor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DonorRecord> getRecordType() {
        return DonorRecord.class;
    }

    /**
     * The column <code>test.donor.doner_id</code>.
     */
    public final TableField<DonorRecord, Integer> DONER_ID = createField("doner_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test.donor_doner_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.donor.first_name</code>.
     */
    public final TableField<DonorRecord, String> FIRST_NAME = createField("first_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>test.donor.last_name</code>.
     */
    public final TableField<DonorRecord, String> LAST_NAME = createField("last_name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>test.donor.gender</code>.
     */
    public final TableField<DonorRecord, String> GENDER = createField("gender", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>test.donor.date_of_birth</code>.
     */
    public final TableField<DonorRecord, Date> DATE_OF_BIRTH = createField("date_of_birth", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>test.donor.race</code>.
     */
    public final TableField<DonorRecord, String> RACE = createField("race", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>test.donor.ethnicity</code>.
     */
    public final TableField<DonorRecord, String> ETHNICITY = createField("ethnicity", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>test.donor.date_of_death</code>.
     */
    public final TableField<DonorRecord, Date> DATE_OF_DEATH = createField("date_of_death", org.jooq.impl.SQLDataType.DATE, this, "");

    /**
     * The column <code>test.donor.couse_of_death</code>.
     */
    public final TableField<DonorRecord, String> COUSE_OF_DEATH = createField("couse_of_death", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>test.donor</code> table reference
     */
    public Donor() {
        this(DSL.name("donor"), null);
    }

    /**
     * Create an aliased <code>test.donor</code> table reference
     */
    public Donor(String alias) {
        this(DSL.name(alias), DONOR);
    }

    /**
     * Create an aliased <code>test.donor</code> table reference
     */
    public Donor(Name alias) {
        this(alias, DONOR);
    }

    private Donor(Name alias, Table<DonorRecord> aliased) {
        this(alias, aliased, null);
    }

    private Donor(Name alias, Table<DonorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Donor(Table<O> child, ForeignKey<O, DonorRecord> key) {
        super(child, key, DONOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DONOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DonorRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DONOR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DonorRecord> getPrimaryKey() {
        return Keys.DONOR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DonorRecord>> getKeys() {
        return Arrays.<UniqueKey<DonorRecord>>asList(Keys.DONOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Donor as(String alias) {
        return new Donor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Donor as(Name alias) {
        return new Donor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Donor rename(String name) {
        return new Donor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Donor rename(Name name) {
        return new Donor(name, null);
    }
}
