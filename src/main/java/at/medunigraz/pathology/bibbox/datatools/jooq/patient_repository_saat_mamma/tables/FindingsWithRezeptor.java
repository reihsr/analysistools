/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.PatientRepositorySaatMamma;
import at.medunigraz.pathology.bibbox.datatools.jooq.patient_repository_saat_mamma.tables.records.FindingsWithRezeptorRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class FindingsWithRezeptor extends TableImpl<FindingsWithRezeptorRecord> {

    private static final long serialVersionUID = 80398339;

    /**
     * The reference instance of <code>patient_repository_saat_mamma.findings_with_rezeptor</code>
     */
    public static final FindingsWithRezeptor FINDINGS_WITH_REZEPTOR = new FindingsWithRezeptor();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FindingsWithRezeptorRecord> getRecordType() {
        return FindingsWithRezeptorRecord.class;
    }

    /**
     * The column <code>patient_repository_saat_mamma.findings_with_rezeptor.finding_id</code>.
     */
    public final TableField<FindingsWithRezeptorRecord, Integer> FINDING_ID = createField("finding_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>patient_repository_saat_mamma.findings_with_rezeptor.her_2_neu</code>.
     */
    public final TableField<FindingsWithRezeptorRecord, String> HER_2_NEU = createField("her_2_neu", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>patient_repository_saat_mamma.findings_with_rezeptor.regex</code>.
     */
    public final TableField<FindingsWithRezeptorRecord, String> REGEX = createField("regex", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>patient_repository_saat_mamma.findings_with_rezeptor</code> table reference
     */
    public FindingsWithRezeptor() {
        this(DSL.name("findings_with_rezeptor"), null);
    }

    /**
     * Create an aliased <code>patient_repository_saat_mamma.findings_with_rezeptor</code> table reference
     */
    public FindingsWithRezeptor(String alias) {
        this(DSL.name(alias), FINDINGS_WITH_REZEPTOR);
    }

    /**
     * Create an aliased <code>patient_repository_saat_mamma.findings_with_rezeptor</code> table reference
     */
    public FindingsWithRezeptor(Name alias) {
        this(alias, FINDINGS_WITH_REZEPTOR);
    }

    private FindingsWithRezeptor(Name alias, Table<FindingsWithRezeptorRecord> aliased) {
        this(alias, aliased, null);
    }

    private FindingsWithRezeptor(Name alias, Table<FindingsWithRezeptorRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> FindingsWithRezeptor(Table<O> child, ForeignKey<O, FindingsWithRezeptorRecord> key) {
        super(child, key, FINDINGS_WITH_REZEPTOR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return PatientRepositorySaatMamma.PATIENT_REPOSITORY_SAAT_MAMMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.FINDINGS_WITH_REZEPTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<FindingsWithRezeptorRecord> getPrimaryKey() {
        return Keys.FINDINGS_WITH_REZEPTOR_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<FindingsWithRezeptorRecord>> getKeys() {
        return Arrays.<UniqueKey<FindingsWithRezeptorRecord>>asList(Keys.FINDINGS_WITH_REZEPTOR_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsWithRezeptor as(String alias) {
        return new FindingsWithRezeptor(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public FindingsWithRezeptor as(Name alias) {
        return new FindingsWithRezeptor(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingsWithRezeptor rename(String name) {
        return new FindingsWithRezeptor(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FindingsWithRezeptor rename(Name name) {
        return new FindingsWithRezeptor(name, null);
    }
}
