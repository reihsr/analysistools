/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.test.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.test.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.Test;
import at.medunigraz.pathology.bibbox.datatools.jooq.test.tables.records.ProviderRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Provider extends TableImpl<ProviderRecord> {

    private static final long serialVersionUID = 1269968784;

    /**
     * The reference instance of <code>test.provider</code>
     */
    public static final Provider PROVIDER = new Provider();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProviderRecord> getRecordType() {
        return ProviderRecord.class;
    }

    /**
     * The column <code>test.provider.provider_id</code>.
     */
    public final TableField<ProviderRecord, Integer> PROVIDER_ID = createField("provider_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('test.provider_provider_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>test.provider.name</code>.
     */
    public final TableField<ProviderRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>test.provider.address</code>.
     */
    public final TableField<ProviderRecord, String> ADDRESS = createField("address", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>test.provider</code> table reference
     */
    public Provider() {
        this(DSL.name("provider"), null);
    }

    /**
     * Create an aliased <code>test.provider</code> table reference
     */
    public Provider(String alias) {
        this(DSL.name(alias), PROVIDER);
    }

    /**
     * Create an aliased <code>test.provider</code> table reference
     */
    public Provider(Name alias) {
        this(alias, PROVIDER);
    }

    private Provider(Name alias, Table<ProviderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Provider(Name alias, Table<ProviderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Provider(Table<O> child, ForeignKey<O, ProviderRecord> key) {
        super(child, key, PROVIDER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PROVIDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<ProviderRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PROVIDER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProviderRecord> getPrimaryKey() {
        return Keys.PROVIDER_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProviderRecord>> getKeys() {
        return Arrays.<UniqueKey<ProviderRecord>>asList(Keys.PROVIDER_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Provider as(String alias) {
        return new Provider(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Provider as(Name alias) {
        return new Provider(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Provider rename(String name) {
        return new Provider(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Provider rename(Name name) {
        return new Provider(name, null);
    }
}
