/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.ProstateSaat;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_saat.tables.records.GleasonDiagnosisViewRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GleasonDiagnosisView extends TableImpl<GleasonDiagnosisViewRecord> {

    private static final long serialVersionUID = -59596023;

    /**
     * The reference instance of <code>prostate_saat.gleason_diagnosis_view</code>
     */
    public static final GleasonDiagnosisView GLEASON_DIAGNOSIS_VIEW = new GleasonDiagnosisView();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GleasonDiagnosisViewRecord> getRecordType() {
        return GleasonDiagnosisViewRecord.class;
    }

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.id</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.patient_id</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, String> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.count</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, Long> COUNT = createField("count", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.gleason</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, String> GLEASON = createField("gleason", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.year_of_examination</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, Double> YEAR_OF_EXAMINATION = createField("year_of_examination", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.diagnosis</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, String> DIAGNOSIS = createField("diagnosis", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_saat.gleason_diagnosis_view.examination_type</code>.
     */
    public final TableField<GleasonDiagnosisViewRecord, String> EXAMINATION_TYPE = createField("examination_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>prostate_saat.gleason_diagnosis_view</code> table reference
     */
    public GleasonDiagnosisView() {
        this(DSL.name("gleason_diagnosis_view"), null);
    }

    /**
     * Create an aliased <code>prostate_saat.gleason_diagnosis_view</code> table reference
     */
    public GleasonDiagnosisView(String alias) {
        this(DSL.name(alias), GLEASON_DIAGNOSIS_VIEW);
    }

    /**
     * Create an aliased <code>prostate_saat.gleason_diagnosis_view</code> table reference
     */
    public GleasonDiagnosisView(Name alias) {
        this(alias, GLEASON_DIAGNOSIS_VIEW);
    }

    private GleasonDiagnosisView(Name alias, Table<GleasonDiagnosisViewRecord> aliased) {
        this(alias, aliased, null);
    }

    private GleasonDiagnosisView(Name alias, Table<GleasonDiagnosisViewRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> GleasonDiagnosisView(Table<O> child, ForeignKey<O, GleasonDiagnosisViewRecord> key) {
        super(child, key, GLEASON_DIAGNOSIS_VIEW);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProstateSaat.PROSTATE_SAAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GleasonDiagnosisView as(String alias) {
        return new GleasonDiagnosisView(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GleasonDiagnosisView as(Name alias) {
        return new GleasonDiagnosisView(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public GleasonDiagnosisView rename(String name) {
        return new GleasonDiagnosisView(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public GleasonDiagnosisView rename(Name name) {
        return new GleasonDiagnosisView(name, null);
    }
}
