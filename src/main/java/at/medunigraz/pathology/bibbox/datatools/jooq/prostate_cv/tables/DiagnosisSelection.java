/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.prostate_cv.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_cv.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_cv.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_cv.ProstateCv;
import at.medunigraz.pathology.bibbox.datatools.jooq.prostate_cv.tables.records.DiagnosisSelectionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DiagnosisSelection extends TableImpl<DiagnosisSelectionRecord> {

    private static final long serialVersionUID = 1562973986;

    /**
     * The reference instance of <code>prostate_cv.diagnosis_selection</code>
     */
    public static final DiagnosisSelection DIAGNOSIS_SELECTION = new DiagnosisSelection();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DiagnosisSelectionRecord> getRecordType() {
        return DiagnosisSelectionRecord.class;
    }

    /**
     * The column <code>prostate_cv.diagnosis_selection.id</code>.
     */
    public final TableField<DiagnosisSelectionRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.patient_id</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> PATIENT_ID = createField("patient_id", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.histo</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> HISTO = createField("histo", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.count</code>.
     */
    public final TableField<DiagnosisSelectionRecord, Long> COUNT = createField("count", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.gleason</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> GLEASON = createField("gleason", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.dates</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> DATES = createField("dates", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.year_of_examination</code>.
     */
    public final TableField<DiagnosisSelectionRecord, Double> YEAR_OF_EXAMINATION = createField("year_of_examination", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.month_of_examination</code>.
     */
    public final TableField<DiagnosisSelectionRecord, Double> MONTH_OF_EXAMINATION = createField("month_of_examination", org.jooq.impl.SQLDataType.DOUBLE, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.diagnosis</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> DIAGNOSIS = createField("diagnosis", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.examination_type</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> EXAMINATION_TYPE = createField("examination_type", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.part</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> PART = createField("part", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.selected_histonumber</code>.
     */
    public final TableField<DiagnosisSelectionRecord, String> SELECTED_HISTONUMBER = createField("selected_histonumber", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>prostate_cv.diagnosis_selection.tablekey</code>.
     */
    public final TableField<DiagnosisSelectionRecord, Integer> TABLEKEY = createField("tablekey", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('prostate_cv.diagnosis_selection_tablekey_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>prostate_cv.diagnosis_selection</code> table reference
     */
    public DiagnosisSelection() {
        this(DSL.name("diagnosis_selection"), null);
    }

    /**
     * Create an aliased <code>prostate_cv.diagnosis_selection</code> table reference
     */
    public DiagnosisSelection(String alias) {
        this(DSL.name(alias), DIAGNOSIS_SELECTION);
    }

    /**
     * Create an aliased <code>prostate_cv.diagnosis_selection</code> table reference
     */
    public DiagnosisSelection(Name alias) {
        this(alias, DIAGNOSIS_SELECTION);
    }

    private DiagnosisSelection(Name alias, Table<DiagnosisSelectionRecord> aliased) {
        this(alias, aliased, null);
    }

    private DiagnosisSelection(Name alias, Table<DiagnosisSelectionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DiagnosisSelection(Table<O> child, ForeignKey<O, DiagnosisSelectionRecord> key) {
        super(child, key, DIAGNOSIS_SELECTION);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return ProstateCv.PROSTATE_CV;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DIAGNOSIS_SELECTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DiagnosisSelectionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DIAGNOSIS_SELECTION;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DiagnosisSelectionRecord> getPrimaryKey() {
        return Keys.DIAGNOSIS_SELECTION_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DiagnosisSelectionRecord>> getKeys() {
        return Arrays.<UniqueKey<DiagnosisSelectionRecord>>asList(Keys.DIAGNOSIS_SELECTION_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiagnosisSelection as(String alias) {
        return new DiagnosisSelection(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DiagnosisSelection as(Name alias) {
        return new DiagnosisSelection(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DiagnosisSelection rename(String name) {
        return new DiagnosisSelection(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DiagnosisSelection rename(Name name) {
        return new DiagnosisSelection(name, null);
    }
}
