/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Scannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables.records.ScantableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Scantable extends TableImpl<ScantableRecord> {

    private static final long serialVersionUID = -1121626852;

    /**
     * The reference instance of <code>scannerwebserviceproductive.scantable</code>
     */
    public static final Scantable SCANTABLE = new Scantable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScantableRecord> getRecordType() {
        return ScantableRecord.class;
    }

    /**
     * The column <code>scannerwebserviceproductive.scantable.scanid</code>.
     */
    public final TableField<ScantableRecord, String> SCANID = createField("scanid", org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scanfiletype</code>.
     */
    public final TableField<ScantableRecord, String> SCANFILETYPE = createField("scanfiletype", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scannerid</code>.
     */
    public final TableField<ScantableRecord, String> SCANNERID = createField("scannerid", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scannerslot</code>.
     */
    public final TableField<ScantableRecord, String> SCANNERSLOT = createField("scannerslot", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scanrackid_fk</code>.
     */
    public final TableField<ScantableRecord, String> SCANRACKID_FK = createField("scanrackid_fk", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scanrackposition</code>.
     */
    public final TableField<ScantableRecord, Short> SCANRACKPOSITION = createField("scanrackposition", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scandate</code>.
     */
    public final TableField<ScantableRecord, Integer> SCANDATE = createField("scandate", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scanmagnification</code>.
     */
    public final TableField<ScantableRecord, String> SCANMAGNIFICATION = createField("scanmagnification", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.storageid_fk</code>.
     */
    public final TableField<ScantableRecord, Short> STORAGEID_FK = createField("storageid_fk", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.storagesubfolder</code>.
     */
    public final TableField<ScantableRecord, String> STORAGESUBFOLDER = createField("storagesubfolder", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.slidebarcode</code>.
     */
    public final TableField<ScantableRecord, String> SLIDEBARCODE = createField("slidebarcode", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.scanqualityok</code>.
     */
    public final TableField<ScantableRecord, Boolean> SCANQUALITYOK = createField("scanqualityok", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.filesize</code>.
     */
    public final TableField<ScantableRecord, Long> FILESIZE = createField("filesize", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.sha1hash</code>.
     */
    public final TableField<ScantableRecord, String> SHA1HASH = createField("sha1hash", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.scantable.filestatus</code>.
     */
    public final TableField<ScantableRecord, String> FILESTATUS = createField("filestatus", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>scannerwebserviceproductive.scantable</code> table reference
     */
    public Scantable() {
        this(DSL.name("scantable"), null);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.scantable</code> table reference
     */
    public Scantable(String alias) {
        this(DSL.name(alias), SCANTABLE);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.scantable</code> table reference
     */
    public Scantable(Name alias) {
        this(alias, SCANTABLE);
    }

    private Scantable(Name alias, Table<ScantableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Scantable(Name alias, Table<ScantableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Scantable(Table<O> child, ForeignKey<O, ScantableRecord> key) {
        super(child, key, SCANTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Scannerwebserviceproductive.SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCANTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ScantableRecord> getPrimaryKey() {
        return Keys.SCANTABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ScantableRecord>> getKeys() {
        return Arrays.<UniqueKey<ScantableRecord>>asList(Keys.SCANTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scantable as(String alias) {
        return new Scantable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Scantable as(Name alias) {
        return new Scantable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Scantable rename(String name) {
        return new Scantable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Scantable rename(Name name) {
        return new Scantable(name, null);
    }
}
