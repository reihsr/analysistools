/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.Public;
import at.medunigraz.pathology.bibbox.datatools.jooq.public_.tables.records.Dictionary2Record;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Dictionary2 extends TableImpl<Dictionary2Record> {

    private static final long serialVersionUID = 2077585762;

    /**
     * The reference instance of <code>public.dictionary2</code>
     */
    public static final Dictionary2 DICTIONARY2 = new Dictionary2();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<Dictionary2Record> getRecordType() {
        return Dictionary2Record.class;
    }

    /**
     * The column <code>public.dictionary2.dictionary_id</code>.
     */
    public final TableField<Dictionary2Record, Integer> DICTIONARY_ID = createField("dictionary_id", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dictionary2_dictionary_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dictionary2.synonym</code>.
     */
    public final TableField<Dictionary2Record, String> SYNONYM = createField("synonym", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.dictionary2.before_synonym</code>.
     */
    public final TableField<Dictionary2Record, Short> BEFORE_SYNONYM = createField("before_synonym", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.dictionary2.after_synonym</code>.
     */
    public final TableField<Dictionary2Record, Short> AFTER_SYNONYM = createField("after_synonym", org.jooq.impl.SQLDataType.SMALLINT, this, "");

    /**
     * The column <code>public.dictionary2.foreword</code>.
     */
    public final TableField<Dictionary2Record, Boolean> FOREWORD = createField("foreword", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.ending</code>.
     */
    public final TableField<Dictionary2Record, Boolean> ENDING = createField("ending", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.sentence</code>.
     */
    public final TableField<Dictionary2Record, Boolean> SENTENCE = createField("sentence", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.iscode</code>.
     */
    public final TableField<Dictionary2Record, Boolean> ISCODE = createField("iscode", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.addiction</code>.
     */
    public final TableField<Dictionary2Record, Integer> ADDICTION = createField("addiction", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.dictionary2.pattern</code>.
     */
    public final TableField<Dictionary2Record, String> PATTERN = createField("pattern", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.dictionary2.code_typ</code>.
     */
    public final TableField<Dictionary2Record, String> CODE_TYP = createField("code_typ", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.dictionary2.code_value</code>.
     */
    public final TableField<Dictionary2Record, String> CODE_VALUE = createField("code_value", org.jooq.impl.SQLDataType.VARCHAR(30), this, "");

    /**
     * The column <code>public.dictionary2.root</code>.
     */
    public final TableField<Dictionary2Record, Boolean> ROOT = createField("root", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.negation</code>.
     */
    public final TableField<Dictionary2Record, Boolean> NEGATION = createField("negation", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.occur</code>.
     */
    public final TableField<Dictionary2Record, Boolean> OCCUR = createField("occur", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.disease_ids</code>.
     */
    public final TableField<Dictionary2Record, String> DISEASE_IDS = createField("disease_ids", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.dictionary2.dirty</code>.
     */
    public final TableField<Dictionary2Record, Boolean> DIRTY = createField("dirty", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * The column <code>public.dictionary2.priority</code>.
     */
    public final TableField<Dictionary2Record, Integer> PRIORITY = createField("priority", org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("5", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dictionary2.disease_ids_count</code>.
     */
    public final TableField<Dictionary2Record, Integer> DISEASE_IDS_COUNT = createField("disease_ids_count", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.dictionary2.priority_mode</code>.
     */
    public final TableField<Dictionary2Record, Boolean> PRIORITY_MODE = createField("priority_mode", org.jooq.impl.SQLDataType.BOOLEAN.defaultValue(org.jooq.impl.DSL.field("true", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.dictionary2</code> table reference
     */
    public Dictionary2() {
        this(DSL.name("dictionary2"), null);
    }

    /**
     * Create an aliased <code>public.dictionary2</code> table reference
     */
    public Dictionary2(String alias) {
        this(DSL.name(alias), DICTIONARY2);
    }

    /**
     * Create an aliased <code>public.dictionary2</code> table reference
     */
    public Dictionary2(Name alias) {
        this(alias, DICTIONARY2);
    }

    private Dictionary2(Name alias, Table<Dictionary2Record> aliased) {
        this(alias, aliased, null);
    }

    private Dictionary2(Name alias, Table<Dictionary2Record> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Dictionary2(Table<O> child, ForeignKey<O, Dictionary2Record> key) {
        super(child, key, DICTIONARY2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICTIONARY2_PK, Indexes.HASH_CODE_TYP, Indexes.HASH_CODE_VALUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<Dictionary2Record, Integer> getIdentity() {
        return Keys.IDENTITY_DICTIONARY2;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<Dictionary2Record> getPrimaryKey() {
        return Keys.DICTIONARY2_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<Dictionary2Record>> getKeys() {
        return Arrays.<UniqueKey<Dictionary2Record>>asList(Keys.DICTIONARY2_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dictionary2 as(String alias) {
        return new Dictionary2(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Dictionary2 as(Name alias) {
        return new Dictionary2(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary2 rename(String name) {
        return new Dictionary2(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Dictionary2 rename(Name name) {
        return new Dictionary2(name, null);
    }
}
