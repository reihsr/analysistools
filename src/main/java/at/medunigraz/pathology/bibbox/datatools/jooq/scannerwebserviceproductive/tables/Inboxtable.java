/*
 * This file is generated by jOOQ.
 */
package at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables;


import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Indexes;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Keys;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.Scannerwebserviceproductive;
import at.medunigraz.pathology.bibbox.datatools.jooq.scannerwebserviceproductive.tables.records.InboxtableRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Inboxtable extends TableImpl<InboxtableRecord> {

    private static final long serialVersionUID = 1053668496;

    /**
     * The reference instance of <code>scannerwebserviceproductive.inboxtable</code>
     */
    public static final Inboxtable INBOXTABLE = new Inboxtable();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InboxtableRecord> getRecordType() {
        return InboxtableRecord.class;
    }

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.inboxid</code>.
     */
    public final TableField<InboxtableRecord, Integer> INBOXID = createField("inboxid", org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('scannerwebserviceproductive.inboxid_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.inboxfolder</code>.
     */
    public final TableField<InboxtableRecord, String> INBOXFOLDER = createField("inboxfolder", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.inboxisactive</code>.
     */
    public final TableField<InboxtableRecord, Boolean> INBOXISACTIVE = createField("inboxisactive", org.jooq.impl.SQLDataType.BOOLEAN, this, "");

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.inboxinfo</code>.
     */
    public final TableField<InboxtableRecord, String> INBOXINFO = createField("inboxinfo", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.inboxthreads</code>.
     */
    public final TableField<InboxtableRecord, Integer> INBOXTHREADS = createField("inboxthreads", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.projectid_fk</code>.
     */
    public final TableField<InboxtableRecord, Integer> PROJECTID_FK = createField("projectid_fk", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>scannerwebserviceproductive.inboxtable.wpname</code>.
     */
    public final TableField<InboxtableRecord, String> WPNAME = createField("wpname", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * Create a <code>scannerwebserviceproductive.inboxtable</code> table reference
     */
    public Inboxtable() {
        this(DSL.name("inboxtable"), null);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.inboxtable</code> table reference
     */
    public Inboxtable(String alias) {
        this(DSL.name(alias), INBOXTABLE);
    }

    /**
     * Create an aliased <code>scannerwebserviceproductive.inboxtable</code> table reference
     */
    public Inboxtable(Name alias) {
        this(alias, INBOXTABLE);
    }

    private Inboxtable(Name alias, Table<InboxtableRecord> aliased) {
        this(alias, aliased, null);
    }

    private Inboxtable(Name alias, Table<InboxtableRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Inboxtable(Table<O> child, ForeignKey<O, InboxtableRecord> key) {
        super(child, key, INBOXTABLE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Scannerwebserviceproductive.SCANNERWEBSERVICEPRODUCTIVE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.INBOXTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<InboxtableRecord, Integer> getIdentity() {
        return Keys.IDENTITY_INBOXTABLE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<InboxtableRecord> getPrimaryKey() {
        return Keys.INBOXTABLE_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<InboxtableRecord>> getKeys() {
        return Arrays.<UniqueKey<InboxtableRecord>>asList(Keys.INBOXTABLE_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Inboxtable as(String alias) {
        return new Inboxtable(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Inboxtable as(Name alias) {
        return new Inboxtable(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Inboxtable rename(String name) {
        return new Inboxtable(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Inboxtable rename(Name name) {
        return new Inboxtable(name, null);
    }
}
